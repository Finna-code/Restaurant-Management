
'use server';
/**
 * @fileOverview An AI agent that generates insights from restaurant dashboard analytics.
 *
 * - generateDashboardInsights - A function that analyzes dashboard data and returns insights.
 * - DashboardAnalyticsInput - The input type for the analytics data.
 * - DashboardInsightsOutput - The return type for the generated insights.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

// Define the schema for each part of the analytics data
const SalesDataPointSchema = z.object({
  date: z.string().describe('Date of the sales data point, typically YYYY-MM-DD.'),
  totalSales: z.number().describe('Total sales amount for that date.'),
  orderCount: z.number().describe('Total number of orders for that date.'),
});

const ItemSalesDataPointSchema = z.object({
  itemName: z.string().describe('Name of the menu item.'),
  quantitySold: z.number().describe('Quantity of this item sold.'),
  totalRevenue: z.number().describe('Total revenue generated by this item.'),
});

const CategorySalesDataPointSchema = z.object({
  categoryName: z.string().describe('Name of the menu category.'),
  totalRevenue: z.number().describe('Total revenue generated by this category.'),
});

const PeakHourDataPointSchema = z.object({
  hour: z.number().describe('Hour of the day (0-23).'),
  orderCount: z.number().describe('Number of orders during this hour.'),
});

// Define the input schema for the flow, matching AnalyticsData structure
// Omitting weeklySales for brevity in the prompt, focusing on more granular data.
const DashboardAnalyticsInputSchema = z.object({
  dailySales: z.array(SalesDataPointSchema).describe('Array of daily sales data for the last 7 days.'),
  mostOrderedDishes: z.array(ItemSalesDataPointSchema).describe('Array of top 5 most ordered dishes by quantity.'),
  categoryRevenue: z.array(CategorySalesDataPointSchema).describe('Array of revenue breakdown by menu category.'),
  peakOrderingHours: z.array(PeakHourDataPointSchema).describe('Array of order volume by hour of the day.'),
});
export type DashboardAnalyticsInput = z.infer<typeof DashboardAnalyticsInputSchema>;

// Define the output schema for the flow
const DashboardInsightsOutputSchema = z.object({
  insightsText: z.string().describe('A brief summary of 2-3 insightful takeaways from the provided restaurant analytics data, formatted as a short paragraph or a few bullet points.'),
});
export type DashboardInsightsOutput = z.infer<typeof DashboardInsightsOutputSchema>;

// Define an error output schema for server action error responses
const DashboardInsightsErrorOutputSchema = z.object({
  error: z.string().describe('An error message if insights could not be generated.'),
});
type DashboardInsightsErrorOutput = z.infer<typeof DashboardInsightsErrorOutputSchema>;

export type GenerateDashboardInsightsResponse = DashboardInsightsOutput | DashboardInsightsErrorOutput;


export async function generateDashboardInsights(input: DashboardAnalyticsInput): Promise<GenerateDashboardInsightsResponse> {
  try {
    const flowResult = await generateDashboardInsightsFlow(input);
    if (!flowResult || !flowResult.insightsText) {
      console.error('[generateDashboardInsights SA] Flow returned invalid or empty result for input:', input);
      return { error: 'AI insights could not be generated at this time (empty result from flow).' };
    }
    return flowResult;
  } catch (e: any) {
    console.error('[generateDashboardInsights SA] Error during flow execution:', e);
    return { error: e.message || 'An unexpected error occurred while fetching AI insights.' };
  }
}

const prompt = ai.definePrompt({
  name: 'generateDashboardInsightsPrompt',
  input: {schema: DashboardAnalyticsInputSchema},
  output: {schema: DashboardInsightsOutputSchema},
  prompt: `You are an expert AI business analyst for a restaurant.
Review the following restaurant performance data and provide 2-3 brief but insightful takeaways.
Focus on actionable observations or potential opportunities. Present the insights as a short paragraph or a few bullet points.

Restaurant Performance Data:

Daily Sales (last 7 days):
{{#each dailySales}}
- Date: {{this.date}}, Sales: {{this.totalSales}}, Orders: {{this.orderCount}}
{{/each}}

Most Ordered Dishes (Top 5 by quantity):
{{#each mostOrderedDishes}}
- {{this.itemName}}: {{this.quantitySold}} sold, Revenue: {{this.totalRevenue}}
{{/each}}

Category Revenue Breakdown:
{{#each categoryRevenue}}
- {{this.categoryName}}: Revenue {{this.totalRevenue}}
{{/each}}

Peak Ordering Hours:
{{#each peakOrderingHours}}
- Hour {{this.hour}}:00 : {{this.orderCount}} orders
{{/each}}

Your insights for the restaurant:
`,
});

const generateDashboardInsightsFlow = ai.defineFlow(
  {
    name: 'generateDashboardInsightsFlow',
    inputSchema: DashboardAnalyticsInputSchema,
    outputSchema: DashboardInsightsOutputSchema,
  },
  async (input) => {
    const {output} = await prompt(input);
    if (!output) {
        console.error("[generateDashboardInsightsFlow] Genkit prompt returned null or undefined output for input:", input);
        throw new Error("Failed to get a valid response from the AI model for dashboard insights.");
    }
    return output;
  }
);

