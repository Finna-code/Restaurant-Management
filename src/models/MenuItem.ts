
import mongoose, { Schema, Document, models, Model } from 'mongoose';
import type { MenuItem as MenuItemType, CustomerFeedback as CustomerFeedbackType, DietaryTag, MenuCategory } from '@/lib/types';

// Define the schema for CustomerFeedback
const CustomerFeedbackSchema = new Schema<CustomerFeedbackType>({
  // id is automatically generated by MongoDB (_id) and can be mapped if needed, but typically not part of schema unless you manage it.
  userId: { type: String, required: true },
  userName: { type: String, required: true },
  rating: { type: Number, required: true, min: 1, max: 5 },
  comment: { type: String, required: true },
  createdAt: { type: String, required: true }, // Using String for ISO date compatibility with existing type
}, { _id: false }); // Don't create separate _id for subdocuments

// Define the schema for MenuItem
const MenuItemSchema = new Schema<MenuItemType>({
  name: { type: String, required: true, trim: true },
  category: { type: String, required: true }, // Consider using enum from MENU_CATEGORIES if strict validation is needed at DB level
  price: { type: Number, required: true, min: 0 },
  description: { type: String, required: true, trim: true },
  ingredients: [{ type: String, required: true }],
  tags: [{ type: String }], // Consider using enum from DIETARY_TAGS if strict validation is needed
  availability: { type: Boolean, required: true, default: true },
  imageUrl: { type: String, trim: true }, // Not strictly required, as placeholder can be used
  feedbacks: [CustomerFeedbackSchema], // Array of subdocuments
  averageRating: { type: Number, min: 0, max: 5 },
  prepTime: { type: Number, min: 0 }, // in minutes
}, {
  timestamps: true, // Adds createdAt and updatedAt timestamps automatically
  toJSON: {
    virtuals: true, // Ensure virtuals are included if you define any
    transform: function(doc, ret) {
      ret.id = ret._id; // Map _id to id
      delete ret._id;   // Remove _id
      delete ret.__v;  // Remove __v
    }
  },
  toObject: {
    virtuals: true,
    transform: function(doc, ret) {
      ret.id = ret._id;
      delete ret._id;
      delete ret.__v;
    }
  }
});

// Create the model
// Check if the model already exists before defining it to prevent OverwriteModelError in HMR environments
const MenuItem: Model<MenuItemType> = models.MenuItem || mongoose.model<MenuItemType>('MenuItem', MenuItemSchema);

export default MenuItem;
